#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable +pc unicode

-type options() :: #{ compile_path => string()
                    , verbose      => boolean()
                    , time         => boolean()
                    , code_paths   => [string()]
                    , files        => [string()]
                    }.

-spec main([string()]) -> ok.
main(Args) ->
  Opts  = parse_args(Args),
  ok    = process_options(Opts),
  ok    = clojerl:start(),
  Files = maps:get(files, Opts),

  CompilePath = maps:get(compile_path, Opts),
  Bindings    = #{ <<"#'clojure.core/*compile-path*">>  => CompilePath
                 , <<"#'clojure.core/*compile-files*">> => true
                 },
  ok = 'clojerl.Var':push_bindings(Bindings),
  ok = lists:foreach(fun(X) -> compile_file(X, Opts) end, Files),
  ok = 'clojerl.Var':pop_bindings(),
  ok.

-spec compile_file(string(), options()) -> term().
compile_file(Path, Opts) ->
  PathBin = list_to_binary(Path),
  clj_compiler:compile_file(PathBin, Opts).

-spec default_options() -> options().
default_options() ->
  #{ compile_path => "ebin"
   , code_paths   => []
   , files        => []
   , time         => false
   , verbose      => false
   }.

-spec parse_args([string()]) -> options().
parse_args(Args) ->
  parse_args(Args, default_options()).

-spec parse_args([string()], options()) -> options().
parse_args([], Opts) ->
  Opts;
parse_args(["-o", CompilePath | Rest], Opts) ->
  parse_args(Rest, Opts#{compile_path => CompilePath});
parse_args(["-pa", CodePath | Rest], Opts = #{code_paths := CodePaths}) ->
  parse_args(Rest, Opts#{code_paths => [CodePath | CodePaths]});
parse_args([File | Rest], Opts = #{files := Files}) ->
  parse_args(Rest, Opts#{files => [File | Files]}).

-spec process_options(options()) -> ok.
process_options(Opts) ->
  #{ compile_path := CompilePath
   , code_paths   := CodePaths
   } = Opts,
  ok = code:add_paths([CompilePath | CodePaths]).
