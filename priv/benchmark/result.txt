{compiling,<<"priv/benchmark/benchmark_runner.clj">>}
Compiling priv/benchmark/benchmark_runner.clj
[x 1], (identity x), 1000000 runs, 27.58586 msecs
;; symbol construction
[], (symbol (quote foo)), 1000000 runs, 61.84771 msecs

;;; instance?
[coll []], (instance? :clojerl.Vector coll), 1000000 runs, 50.919627 msecs
;;; satisfies?
[coll (list 1 2 3)], (satisfies? :clojerl.ISeq coll), 1000000 runs, 113.526862 msecs
[coll [1 2 3]], (satisfies? :clojerl.ISeq coll), 1000000 runs, 115.055528 msecs

;;; tuple & string ops
[coll "foobar"], (seq coll), 1000000 runs, 461.45967 msecs
[coll "foobar"], (first coll), 1000000 runs, 807.745835 msecs
[coll "foobar"], (nth coll 2), 1000000 runs, 697.57494 msecs
[coll (tuple 1 2 3)], (seq coll), 1000000 runs, 179.866378 msecs
[coll (tuple 1 2 3)], (first coll), 1000000 runs, 540.103844 msecs
[coll (tuple 1 2 3)], (nth coll 2), 1000000 runs, 253.475419 msecs

;;; list ops
[coll (list 1 2 3)], (first coll), 1000000 runs, 243.008476 msecs
[coll (list 1 2 3)], (rest coll), 1000000 runs, 246.541701 msecs
[], (list), 1000000 runs, 45.863352 msecs
[], (list 1 2 3), 1000000 runs, 42.491887 msecs

;;; vector ops
[], [], 1000000 runs, 86.321227 msecs
[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))], (count [a b c]), 1000000 runs, 417.610503 msecs
[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))], (count (vec [a b c])), 1000000 runs, 767.243315 msecs
[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))], (count (vector a b c)), 1000000 runs, 427.515064 msecs
[coll [1 2 3]], (nth coll 0), 1000000 runs, 275.181099 msecs
[coll [1 2 3]], (coll 0), 1000000 runs, 199.091253 msecs
[coll [1 2 3]], (conj coll 4), 1000000 runs, 268.525859 msecs
[coll [1 2 3]], (seq coll), 1000000 runs, 255.982405 msecs
[coll (seq [1 2 3])], (first coll), 1000000 runs, 270.389264 msecs
[coll (seq [1 2 3])], (rest coll), 1000000 runs, 260.091477 msecs
[coll (seq [1 2 3])], (next coll), 1000000 runs, 249.814979 msecs

;;; large vector ops
[], (reduce conj [] (range 40000)), 10 runs, 837.352013 msecs
[coll (reduce conj [] (range (+ 32768 32)))], (conj coll :foo), 100000 runs, 52.142685 msecs
[coll (reduce conj [] (range 40000))], (assoc coll 123 :foo), 100000 runs, 53.604138 msecs
[coll (reduce conj [] (range (+ 32768 33)))], (pop coll), 100000 runs, 23.292453 msecs

;;; vector equality
[a (into [] (range 1000000)) b (into [] (range 1000000))], (= a b), 1 runs, 345.129419 msecs

;;; keyword compare

;;; reduce lazy-seqs, vectors, ranges
[coll (take 100000 (iterate inc 0))], (reduce + 0 coll), 1 runs, 419.381659 msecs
[coll (range 1000000)], (reduce + 0 coll), 1 runs, 1505.852876 msecs
[coll (into [] (range 1000000))], (reduce + 0 coll), 1 runs, 1537.455564 msecs

;; apply
[coll (into [] (range 1000000))], (apply + coll), 1 runs, 1085.317687 msecs
[], (list 1 2 3 4 5), 1000000 runs, 43.477418 msecs
[xs (list 1 2 3 4 5)], (apply list xs), 1000000 runs, 1341.018629 msecs
[xs [1 2 3 4 5]], (apply list xs), 1000000 runs, 1491.249305 msecs
[f (fn [a b & more])], (apply f (range 32)), 1000000 runs, 1063.87442 msecs
[f (fn [a b c d e f g h i j & more])], (apply f (range 32)), 1000000 runs, 1077.116003 msecs

;; update-in
[coll {:foo 1} ks [:foo]], (update-in coll ks inc), 1000000 runs, 3178.477154 msecs

;;; map / record ops
[coll {:foo 1, :bar 2}], (get coll :foo), 1000000 runs, 425.862837 msecs
[coll {(quote foo) 1, (quote bar) 2}], (get coll (quote foo)), 1000000 runs, 451.225911 msecs
[coll {:foo 1, :bar 2}], (:foo coll), 1000000 runs, 585.52965 msecs
[coll {(quote foo) 1, (quote bar) 2}], ((quote foo) coll), 1000000 runs, 575.850421 msecs
[coll {:foo 1, :bar 2}], (kw coll), 1000000 runs, 608.723219 msecs
[coll {(quote foo) 1, (quote bar) 2}], (sym coll), 1000000 runs, 583.664712 msecs
[coll {:foo 1, :bar 2}], (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m)), 1 runs, 43.110195 msecs
[coll (new Foo 1 2)], (:bar coll), 1000000 runs, 680.962725 msecs
[coll (new Foo 1 2)], (assoc coll :bar 2), 1000000 runs, 1155.09381 msecs
[coll (new Foo 1 2)], (assoc coll :baz 3), 1000000 runs, 2077.765687 msecs
[coll (new Foo 1 2)], (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)), 1 runs, 1142.112367 msecs

;;; zipmap
[m {:c 3, :b 2, :a 1}], (zipmap (keys m) (map inc (vals m))), 100000 runs, 1216.608662 msecs

;;; seq ops
[coll (range 500000)], (reduce + coll), 1 runs, 714.781967 msecs

;;; reader
;;; range
[r (range 1000000)], (last r), 1 runs, 510.875086 msecs

;;; lazy-seq
;;; first run
[r r], (last r), 1 runs, 2461.09789 msecs
;;; second run
[r r], (last r), 1 runs, 2445.784905 msecs

;;; comprehensions
[xs (range 512)], (last (for [x xs y xs] (+ x y))), 1 runs, 1610.603703 msecs
[xs (vec (range 512))], (last (for [x xs y xs] (+ x y))), 4 runs, 6544.294312 msecs

;; reducers
;; transducers
;; reduce range 1000000 many ops
[xs (range 1000000)], (reduce + 0 (map inc (map inc (map inc xs)))), 1 runs, 7720.354688 msecs
;; transduce range 1000000 many ops 


;; multimethods
[], (simple-multi :foo), 1000000 runs, 3590.629295 msecs


;; higher-order variadic function calls
[f tuple], (f 1 2 3 4 5 6 7 8 9 0), 100000 runs, 143.114451 msecs
[f vector], (f 1 2 3 4 5 6 7 8 9 0), 100000 runs, 253.43742 msecs
[], (= 1 1 1 1 1 1 1 1 1 0), 100000 runs, 611.195193 msecs
Read, Analyze & Emit: 66988.516 ms
Compile Forms: 109.51 ms
Total: 67103.07 ms
