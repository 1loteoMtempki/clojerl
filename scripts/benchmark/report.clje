(ns benchmark.report
  (:refer-clojure :exclude [compare])
  (:require [clojure.string :as str]
            [clojure.pprint :as pp]))

(defn process-line
  [acc line]
  (let [[_ expr runs time] (re-find #"(.*), (\d+) runs, (\d+) ms" line)
        time (when time (erlang/binary_to_integer time))
        item {:expr expr :runs runs :time time}]
    (if expr
      (assoc acc expr item)
      acc)))

(defn make-report
  [content]
  (->> (str/split content #"\n")
       (reduce process-line {})))

(defn calculate-ratio
  [{:keys [time time-prev] :as totals}]
  (->> (/ time time-prev)
       (format "~.2f")
       (assoc totals :ratio)))

(defn calculate-totals
  [cols items]
  (->> cols
       (map #(vector % (reduce + (map % items))))
       (into {:expr "Totals"})
       calculate-ratio
       (conj (vec items))))

(defn print-report
  [items]
  (let [cols [:expr :runs :time-prev :time :diff :diff% :ratio]]
    (->> items
         (sort-by :diff%)
         (calculate-totals [:time-prev :time :diff])
         (pp/print-table cols))))

(defn compare-item
  [items item-prev]
  (let [expr   (:expr item-prev)
        item   (items expr)
        t      (:time item)
        t-prev (:time item-prev)
        diff   (if t (- t t-prev) "-")
        diff%  (if t (-> diff (/ t-prev) (* 100) int) "-")
        ratio  (/ t t-prev)]
    (assoc items expr (assoc item-prev
                             :time-prev t-prev
                             :time t
                             :diff diff
                             :diff% diff%
                             :ratio (format "~.2f" ratio)))))

(defn compare
  [items items-prev]
  (vals (reduce compare-item items items-prev)))

(defn -main [& [path path-prev]]
  (let [items (make-report (slurp path))
        items-prev (when path-prev
                     (vals (make-report (slurp path-prev))))]
    (-> (compare items items-prev)
        print-report
        with-out-str
        (str/replace "-+-" "-|-")
        println)))
