;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; VM      =  Erlang/OTP 19 [erts-8.3.5.4]
;;; Clojure =  0.4.1-1734.c8a2028
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[x 1], (identity x), 1000000 runs, 11 msecs
;; symbol construction
[], (symbol (quote foo)), 1000000 runs, 33 msecs

;;; instance?
[coll []], (instance? clojerl.Vector coll), 1000000 runs, 27 msecs
;;; satisfies?
[coll (list 1 2 3)], (satisfies? clojerl.ISeq coll), 1000000 runs, 45 msecs
[coll [1 2 3]], (satisfies? clojerl.ISeq coll), 1000000 runs, 44 msecs

;;; tuple & string ops
[coll "foobar"], (seq coll), 1000000 runs, 244 msecs
[coll "foobar"], (first coll), 1000000 runs, 300 msecs
[coll "foobar"], (nth coll 2), 1000000 runs, 150 msecs
[coll (tuple 1 2 3)], (seq coll), 1000000 runs, 55 msecs
[coll (tuple 1 2 3)], (first coll), 1000000 runs, 123 msecs
[coll (tuple 1 2 3)], (nth coll 2), 1000000 runs, 66 msecs

;;; list ops
[coll (list 1 2 3)], (first coll), 1000000 runs, 51 msecs
[coll (list 1 2 3)], (rest coll), 1000000 runs, 75 msecs
[], (list), 1000000 runs, 29 msecs
[], (list 1 2 3), 1000000 runs, 29 msecs

;;; vector ops
[], [], 1000000 runs, 8 msecs
[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))], (count [a b c]), 1000000 runs, 154 msecs
[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))], (count (vec [a b c])), 1000000 runs, 284 msecs
[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))], (count (vector a b c)), 1000000 runs, 156 msecs
[coll [1 2 3]], (nth coll 0), 1000000 runs, 88 msecs
[coll [1 2 3]], (coll 0), 1000000 runs, 74 msecs
[coll [1 2 3]], (conj coll 4), 1000000 runs, 111 msecs
[coll [1 2 3]], (seq coll), 1000000 runs, 76 msecs
[coll (seq [1 2 3])], (first coll), 1000000 runs, 57 msecs
[coll (seq [1 2 3])], (rest coll), 1000000 runs, 59 msecs
[coll (seq [1 2 3])], (next coll), 1000000 runs, 58 msecs

;;; large vector ops
[], (reduce conj [] (range 40000)), 10 runs, 125 msecs
[coll (reduce conj [] (range (+ 32768 32)))], (conj coll :foo), 100000 runs, 26 msecs
[coll (reduce conj [] (range 40000))], (assoc coll 123 :foo), 100000 runs, 26 msecs
[coll (reduce conj [] (range (+ 32768 33)))], (pop coll), 100000 runs, 24 msecs

;;; vector equality
[a (into [] (range 1000000)) b (into [] (range 1000000))], (= a b), 1 runs, 184 msecs

;;; keyword compare

;;; reduce lazy-seqs, vectors, ranges
[coll (take 100000 (iterate inc 0))], (reduce + 0 coll), 1 runs, 110 msecs
[coll (range 1000000)], (reduce + 0 coll), 1 runs, 181 msecs
[coll (into [] (range 1000000))], (reduce + 0 coll), 1 runs, 180 msecs

;; apply
[coll (into [] (range 1000000))], (apply + coll), 1 runs, 255 msecs
[], (list 1 2 3 4 5), 1000000 runs, 28 msecs
[xs (list 1 2 3 4 5)], (apply list xs), 1000000 runs, 288 msecs
[xs [1 2 3 4 5]], (apply list xs), 1000000 runs, 338 msecs
[f (fn [a b & more])], (apply f (range 32)), 1000000 runs, 594 msecs
[f (fn [a b c d e f g h i j & more])], (apply f (range 32)), 1000000 runs, 595 msecs

;; update-in
[coll {:foo 1} ks [:foo]], (update-in coll ks inc), 1000000 runs, 901 msecs

;;; map / record ops
[coll {:foo 1, :bar 2}], (get coll :foo), 1000000 runs, 149 msecs
[coll {(quote foo) 1, (quote bar) 2}], (get coll (quote foo)), 1000000 runs, 199 msecs
[coll {:foo 1, :bar 2}], (:foo coll), 1000000 runs, 183 msecs
[coll {(quote foo) 1, (quote bar) 2}], ((quote foo) coll), 1000000 runs, 226 msecs
[coll {:foo 1, :bar 2}], (kw coll), 1000000 runs, 186 msecs
[coll {(quote foo) 1, (quote bar) 2}], (sym coll), 1000000 runs, 223 msecs
[coll {:foo 1, :bar 2}], (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m)), 1 runs, 22 msecs
[coll (new Foo 1 2)], (:bar coll), 1000000 runs, 151 msecs
[coll (new Foo 1 2)], (assoc coll :bar 2), 1000000 runs, 222 msecs
[coll (new Foo 1 2)], (assoc coll :baz 3), 1000000 runs, 366 msecs
[coll (new Foo 1 2)], (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)), 1 runs, 220 msecs

;;; zipmap
[m {:c 3, :b 2, :a 1}], (zipmap (keys m) (map inc (vals m))), 100000 runs, 385 msecs

;;; seq ops
[coll (range 500000)], (reduce + coll), 1 runs, 88 msecs

;;; reader
[s "{:foo [1 2 3]}"], (read-string s), 1000 runs, 28 msecs
[s big-str-data], (read-string s), 1000 runs, 1585 msecs

;;; range
[r (range 1000000)], (last r), 1 runs, 169 msecs

;;; lazy-seq
;;; first run
[r r], (last r), 1 runs, 482 msecs
;;; second run
[r r], (last r), 1 runs, 456 msecs

;;; comprehensions
[xs (range 512)], (last (for [x xs y xs] (+ x y))), 1 runs, 141 msecs
[xs (vec (range 512))], (last (for [x xs y xs] (+ x y))), 4 runs, 536 msecs

;; reducers
;; transducers
[xs (into [] (range 1000000))], (transduce (comp (map inc) (map inc) (map inc)) + 0 xs), 1 runs, 1276 msecs
;; reduce range 1000000 many ops
[xs (range 1000000)], (reduce + 0 (map inc (map inc (map inc xs)))), 1 runs, 1014 msecs
;; transduce range 1000000 many ops 
[xs (range 1000000)], (transduce (comp (map inc) (map inc) (map inc)) + 0 xs), 1 runs, 1280 msecs


;; multimethods
[], (simple-multi :foo), 1000000 runs, 879 msecs


;; higher-order variadic function calls
[f tuple], (f 1 2 3 4 5 6 7 8 9 0), 100000 runs, 31 msecs
[f vector], (f 1 2 3 4 5 6 7 8 9 0), 100000 runs, 98 msecs
[], (= 1 1 1 1 1 1 1 1 1 0), 100000 runs, 163 msecs


;; Destructuring a sequence
[v (into [] (range 1000000))], (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)), 10 runs, 1980 msecs


;;; str
[], (str 1), 1000000 runs, 53 msecs
[], (str nil), 1000000 runs, 18 msecs
[], (str "1"), 1000000 runs, 35 msecs
[], (str "1" "2"), 1000000 runs, 983 msecs
[], (str "1" "2" "3"), 1000000 runs, 1528 msecs


;;; clojure.string
[s "a" f clojure.string/capitalize], (f s), 1000000 runs, 453 msecs
[s "aBcDeF" f clojure.string/capitalize], (f s), 1000000 runs, 3156 msecs
;; printing of numbers
[x true], (pr-str x), 1000 runs, 14 msecs
[x 10], (pr-str x), 1000 runs, 17 msecs


;; cycle
[], (doall (take 1000 (cycle [1 2 3]))), 1000 runs, 876 msecs
[], (into [] (take 1000) (cycle [1 2 3])), 1000 runs, 1616 msecs
[], (reduce + (take 64 (cycle [1 2 3]))), 10000 runs, 697 msecs
[], (transduce (take 64) + (cycle [1 2 3])), 10000 runs, 1003 msecs


;; repeat
[], (doall (take 1000 (repeat 1))), 1000 runs, 602 msecs
[], (into [] (take 1000) (repeat 1)), 1000 runs, 1190 msecs
[], (doall (repeat 1000 1)), 1000 runs, 614 msecs
[], (into [] (repeat 1000 1)), 1000 runs, 888 msecs
[], (reduce + 0 (repeat 1000 1)), 1000 runs, 781 msecs
[], (into [] (take 1000) (repeat 1)), 1000 runs, 1227 msecs
[], (reduce + (take 64 (repeat 1))), 10000 runs, 498 msecs
[], (transduce (take 64) + (repeat 1)), 10000 runs, 764 msecs
[], (reduce + (take 64 (repeat 48 1))), 10000 runs, 549 msecs
[], (transduce (take 64) + (repeat 48 1)), 10000 runs, 763 msecs


;; iterate
[], (doall (take 1000 (iterate inc 0))), 1000 runs, 796 msecs
[], (into [] (take 1000) (iterate inc 0)), 1000 runs, 1470 msecs
[], (reduce + (take 64 (iterate inc 0))), 10000 runs, 564 msecs
[], (transduce (take 64) + (iterate inc 0)), 10000 runs, 899 msecs


real	0m44.209s
user	0m44.095s
sys	0m0.390s
