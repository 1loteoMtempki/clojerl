(ns examples.try)

(try (prn 1))

(try (erlang/+ 1 :a)
     (catch :error error
       (prn [:error error])))

(try (throw :hello)
     (catch :throw error
       (throw #erl[:not-catched error]))
     (catch :exit error
       (throw #erl[:not-catched error]))
     (catch :error error
       (prn [:throw error])))

(try (throw :hello-before-finally)
     (catch :throw error
       (throw #erl[:not-catched error]))
     (catch :exit error
       (throw #erl[:not-catched error]))
     (catch :error error
       (prn [:throw error]))
     (finally
       (prn :finally)))

;; Accept any error type with _

(try
  (throw :throw)
  (catch _ e
    (prn e)))

(try
  (erlang/throw :error)
  (catch _ e
    (prn e)))

(try
  (erlang/exit :exit)
  (catch _ e
    (prn e)))

;; Use binding for error type

(try
  (erlang/exit :foo)
  (catch t e
    (prn t e)))

;; Use type name for error type

(try
  (erlang/exit :foo)
  (catch clojerl.ExceptionInfo e
    (throw :bad-stuff))
  (catch :exit e
    (prn e)))

(try
  (throw (ex-info "hello" {:some :info}))
  (catch clojerl.ExceptionInfo e
    (prn e))
  (catch :error e
    (throw :bad-stuff)))
