[x 1], (identity x), 1000000 runs, 24.017 msecs
;; symbol construction
[], (symbol (quote foo)), 1000000 runs, 79.929 msecs

;;; instance?
[coll []], (instance? clojerl.Vector coll), 1000000 runs, 67.106 msecs
;;; satisfies?
[coll (list 1 2 3)], (satisfies? clojerl.ISeq coll), 1000000 runs, 148.002 msecs
[coll [1 2 3]], (satisfies? clojerl.ISeq coll), 1000000 runs, 157.423 msecs

;;; tuple & string ops
[coll "foobar"], (seq coll), 1000000 runs, 451.926726 msecs
[coll "foobar"], (first coll), 1000000 runs, 758.4815 msecs
[coll "foobar"], (nth coll 2), 1000000 runs, 659.148565 msecs
[coll (tuple 1 2 3)], (seq coll), 1000000 runs, 178.862881 msecs
[coll (tuple 1 2 3)], (first coll), 1000000 runs, 467.310692 msecs
[coll (tuple 1 2 3)], (nth coll 2), 1000000 runs, 247.494837 msecs

;;; list ops
[coll (list 1 2 3)], (first coll), 1000000 runs, 233.918846 msecs
[coll (list 1 2 3)], (rest coll), 1000000 runs, 264.689825 msecs
[], (list), 1000000 runs, 37.861975 msecs
[], (list 1 2 3), 1000000 runs, 37.258975 msecs

;;; vector ops
[], [], 1000000 runs, 67.850956 msecs
[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))], (count [a b c]), 1000000 runs, 363.60376 msecs
[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))], (count (vec [a b c])), 1000000 runs, 773.71349 msecs
[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))], (count (vector a b c)), 1000000 runs, 372.129754 msecs
[coll [1 2 3]], (nth coll 0), 1000000 runs, 270.247822 msecs
[coll [1 2 3]], (coll 0), 1000000 runs, 172.406886 msecs
[coll [1 2 3]], (conj coll 4), 1000000 runs, 262.595826 msecs
[coll [1 2 3]], (seq coll), 1000000 runs, 233.810846 msecs
[coll (seq [1 2 3])], (first coll), 1000000 runs, 227.11385 msecs
[coll (seq [1 2 3])], (rest coll), 1000000 runs, 265.719825 msecs
[coll (seq [1 2 3])], (next coll), 1000000 runs, 234.378846 msecs

;;; large vector ops
[], (reduce conj [] (range 40000)), 10 runs, 542.097642 msecs
[coll (reduce conj [] (range (+ 32768 32)))], (conj coll :foo), 100000 runs, 53.166965 msecs
[coll (reduce conj [] (range 40000))], (assoc coll 123 :foo), 100000 runs, 50.752967 msecs
[coll (reduce conj [] (range (+ 32768 33)))], (pop coll), 100000 runs, 23.551985 msecs

;;; vector equality
[a (into [] (range 1000000)) b (into [] (range 1000000))], (= a b), 1 runs, 266.164824 msecs

;;; keyword compare

;;; reduce lazy-seqs, vectors, ranges
[coll (take 100000 (iterate inc 0))], (reduce + 0 coll), 1 runs, 361.953761 msecs
[coll (range 1000000)], (reduce + 0 coll), 1 runs, 873.515423 msecs
[coll (into [] (range 1000000))], (reduce + 0 coll), 1 runs, 874.988422 msecs

;; apply
[coll (into [] (range 1000000))], (apply + coll), 1 runs, 928.374388 msecs
[], (list 1 2 3 4 5), 1000000 runs, 37.737975 msecs
[xs (list 1 2 3 4 5)], (apply list xs), 1000000 runs, 1250.276175 msecs
[xs [1 2 3 4 5]], (apply list xs), 1000000 runs, 1395.415079 msecs
[f (fn [a b & more])], (apply f (range 32)), 1000000 runs, 997.360342 msecs
[f (fn [a b c d e f g h i j & more])], (apply f (range 32)), 1000000 runs, 1008.846334 msecs

;; update-in
[coll {:foo 1} ks [:foo]], (update-in coll ks inc), 1000000 runs, 2755.937181 msecs

;;; map / record ops
[coll {:foo 1, :bar 2}], (get coll :foo), 1000000 runs, 409.29573 msecs
[coll {(quote foo) 1, (quote bar) 2}], (get coll (quote foo)), 1000000 runs, 445.507706 msecs
[coll {:foo 1, :bar 2}], (:foo coll), 1000000 runs, 537.801646 msecs
[coll {(quote foo) 1, (quote bar) 2}], ((quote foo) coll), 1000000 runs, 565.377627 msecs
[coll {:foo 1, :bar 2}], (kw coll), 1000000 runs, 538.511645 msecs
[coll {(quote foo) 1, (quote bar) 2}], (sym coll), 1000000 runs, 571.968622 msecs
[coll {:foo 1, :bar 2}], (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m)), 1 runs, 44.157971 msecs
[coll (new Foo 1 2)], (:bar coll), 1000000 runs, 635.043581 msecs
[coll (new Foo 1 2)], (assoc coll :bar 2), 1000000 runs, 1078.899288 msecs
[coll (new Foo 1 2)], (assoc coll :baz 3), 1000000 runs, 1906.205742 msecs
[coll (new Foo 1 2)], (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)), 1 runs, 1073.923291 msecs

;;; zipmap
[m {:c 3, :b 2, :a 1}], (zipmap (keys m) (map inc (vals m))), 100000 runs, 1106.11527 msecs

;;; seq ops
[coll (range 500000)], (reduce + coll), 1 runs, 437.805711 msecs

;;; reader
[s "{:foo [1 2 3]}"], (read-string s), 1000 runs, 73.134952 msecs
[s big-str-data], (read-string s), 1000 runs, 4580.615977 msecs

;;; range
[r (range 1000000)], (last r), 1 runs, 484.83968 msecs

;;; lazy-seq
;;; first run
[r r], (last r), 1 runs, 2399.640416 msecs
;;; second run
[r r], (last r), 1 runs, 2397.359418 msecs

;;; comprehensions
[xs (range 512)], (last (for [x xs y xs] (+ x y))), 1 runs, 1378.12509 msecs
[xs (vec (range 512))], (last (for [x xs y xs] (+ x y))), 4 runs, 5609.949298 msecs

;; reducers
;; transducers
;; reduce range 1000000 many ops
[xs (range 1000000)], (reduce + 0 (map inc (map inc (map inc xs)))), 1 runs, 6573.234662 msecs
;; transduce range 1000000 many ops 


;; multimethods
[], (simple-multi :foo), 1000000 runs, 3777.910507 msecs


;; higher-order variadic function calls
[f tuple], (f 1 2 3 4 5 6 7 8 9 0), 100000 runs, 138.707909 msecs
[f vector], (f 1 2 3 4 5 6 7 8 9 0), 100000 runs, 266.219824 msecs
[], (= 1 1 1 1 1 1 1 1 1 0), 100000 runs, 594.308608 msecs
Read, Analyze & Emit: 62626.026 ms
Compile Forms: 146.419 ms
Total: 62782.145 ms
