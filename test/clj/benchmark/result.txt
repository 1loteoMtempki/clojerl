[x 1], (identity x), 1000000 runs, 23 msecs
;; symbol construction
[], (symbol (quote foo)), 1000000 runs, 76 msecs

;;; instance?
[coll []], (instance? clojerl.Vector coll), 1000000 runs, 68 msecs
;;; satisfies?
[coll (list 1 2 3)], (satisfies? clojerl.ISeq coll), 1000000 runs, 147 msecs
[coll [1 2 3]], (satisfies? clojerl.ISeq coll), 1000000 runs, 142 msecs

;;; tuple & string ops
[coll "foobar"], (seq coll), 1000000 runs, 432 msecs
[coll "foobar"], (first coll), 1000000 runs, 760 msecs
[coll "foobar"], (nth coll 2), 1000000 runs, 612 msecs
[coll (tuple 1 2 3)], (seq coll), 1000000 runs, 171 msecs
[coll (tuple 1 2 3)], (first coll), 1000000 runs, 499 msecs
[coll (tuple 1 2 3)], (nth coll 2), 1000000 runs, 264 msecs

;;; list ops
[coll (list 1 2 3)], (first coll), 1000000 runs, 236 msecs
[coll (list 1 2 3)], (rest coll), 1000000 runs, 258 msecs
[], (list), 1000000 runs, 36 msecs
[], (list 1 2 3), 1000000 runs, 36 msecs

;;; vector ops
[], [], 1000000 runs, 73 msecs
[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))], (count [a b c]), 1000000 runs, 373 msecs
[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))], (count (vec [a b c])), 1000000 runs, 747 msecs
[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))], (count (vector a b c)), 1000000 runs, 379 msecs
[coll [1 2 3]], (nth coll 0), 1000000 runs, 271 msecs
[coll [1 2 3]], (coll 0), 1000000 runs, 166 msecs
[coll [1 2 3]], (conj coll 4), 1000000 runs, 252 msecs
[coll [1 2 3]], (seq coll), 1000000 runs, 233 msecs
[coll (seq [1 2 3])], (first coll), 1000000 runs, 227 msecs
[coll (seq [1 2 3])], (rest coll), 1000000 runs, 259 msecs
[coll (seq [1 2 3])], (next coll), 1000000 runs, 247 msecs

;;; large vector ops
[], (reduce conj [] (range 40000)), 10 runs, 524 msecs
[coll (reduce conj [] (range (+ 32768 32)))], (conj coll :foo), 100000 runs, 53 msecs
[coll (reduce conj [] (range 40000))], (assoc coll 123 :foo), 100000 runs, 47 msecs
[coll (reduce conj [] (range (+ 32768 33)))], (pop coll), 100000 runs, 25 msecs

;;; vector equality
[a (into [] (range 1000000)) b (into [] (range 1000000))], (= a b), 1 runs, 254 msecs

;;; keyword compare

;;; reduce lazy-seqs, vectors, ranges
[coll (take 100000 (iterate inc 0))], (reduce + 0 coll), 1 runs, 367 msecs
[coll (range 1000000)], (reduce + 0 coll), 1 runs, 832 msecs
[coll (into [] (range 1000000))], (reduce + 0 coll), 1 runs, 861 msecs

;; apply
[coll (into [] (range 1000000))], (apply + coll), 1 runs, 980 msecs
[], (list 1 2 3 4 5), 1000000 runs, 38 msecs
[xs (list 1 2 3 4 5)], (apply list xs), 1000000 runs, 1217 msecs
[xs [1 2 3 4 5]], (apply list xs), 1000000 runs, 1363 msecs
[f (fn [a b & more])], (apply f (range 32)), 1000000 runs, 990 msecs
[f (fn [a b c d e f g h i j & more])], (apply f (range 32)), 1000000 runs, 1027 msecs

;; update-in
[coll {:foo 1} ks [:foo]], (update-in coll ks inc), 1000000 runs, 2764 msecs

;;; map / record ops
[coll {:foo 1, :bar 2}], (get coll :foo), 1000000 runs, 396 msecs
[coll {(quote foo) 1, (quote bar) 2}], (get coll (quote foo)), 1000000 runs, 436 msecs
[coll {:foo 1, :bar 2}], (:foo coll), 1000000 runs, 530 msecs
[coll {(quote foo) 1, (quote bar) 2}], ((quote foo) coll), 1000000 runs, 548 msecs
[coll {:foo 1, :bar 2}], (kw coll), 1000000 runs, 532 msecs
[coll {(quote foo) 1, (quote bar) 2}], (sym coll), 1000000 runs, 557 msecs
[coll {:foo 1, :bar 2}], (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m)), 1 runs, 47 msecs
[coll (new Foo 1 2)], (:bar coll), 1000000 runs, 610 msecs
[coll (new Foo 1 2)], (assoc coll :bar 2), 1000000 runs, 1036 msecs
[coll (new Foo 1 2)], (assoc coll :baz 3), 1000000 runs, 1843 msecs
[coll (new Foo 1 2)], (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)), 1 runs, 1026 msecs

;;; zipmap
[m {:c 3, :b 2, :a 1}], (zipmap (keys m) (map inc (vals m))), 100000 runs, 1134 msecs

;;; seq ops
[coll (range 500000)], (reduce + coll), 1 runs, 439 msecs

;;; reader
[s "{:foo [1 2 3]}"], (read-string s), 1000 runs, 75 msecs
[s big-str-data], (read-string s), 1000 runs, 4581 msecs

;;; range
[r (range 1000000)], (last r), 1 runs, 476 msecs

;;; lazy-seq
;;; first run
[r r], (last r), 1 runs, 2320 msecs
;;; second run
[r r], (last r), 1 runs, 2300 msecs

;;; comprehensions
[xs (range 512)], (last (for [x xs y xs] (+ x y))), 1 runs, 1427 msecs
[xs (vec (range 512))], (last (for [x xs y xs] (+ x y))), 4 runs, 5798 msecs

;; reducers
;; transducers
;; reduce range 1000000 many ops
[xs (range 1000000)], (reduce + 0 (map inc (map inc (map inc xs)))), 1 runs, 6489 msecs
;; transduce range 1000000 many ops 


;; multimethods
[], (simple-multi :foo), 1000000 runs, 3708 msecs


;; higher-order variadic function calls
[f tuple], (f 1 2 3 4 5 6 7 8 9 0), 100000 runs, 137 msecs
[f vector], (f 1 2 3 4 5 6 7 8 9 0), 100000 runs, 266 msecs
[], (= 1 1 1 1 1 1 1 1 1 0), 100000 runs, 570 msecs
Read, Analyze & Emit: 62178.411 ms
Compile Forms: 137.164 ms
Total: 62323.665 ms
