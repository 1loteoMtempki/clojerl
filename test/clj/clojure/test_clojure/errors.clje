;   Copyright (c) Rich Hickey. All rights reserved.
;   The use and distribution terms for this software are covered by the
;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;   which can be found in the file epl-v10.html at the root of this distribution.
;   By using this software in any fashion, you are agreeing to be bound by
;   the terms of this license.
;   You must not remove this notice, or any other, from this software.

;; Tests for error handling and messages

(ns clojure.test-clojure.errors
  (:use clojure.test)
  (:import [clojerl ArityError BadArgumentError Error]))

(defn f0 [] 0)

(defn f1 [a] a)

;; Function name that includes many special characters to test demunge
(defn f2:+><->!#%&*|b [x] x)

(defmacro m0 [] `(identity 0))

(defmacro m1 [a] `(inc ~a))

#_(deftest arity-exception
  ;; IllegalArgumentException is pre-1.3
  #_(is (thrown-with-msg? IllegalArgumentException #"Wrong number of args \(1\) passed to"
        (f0 1)))
  (is (thrown-with-msg? ArityError #"Wrong number of args \(0\) passed to"
        (f1)))
  (is (thrown-with-msg? ArityError #"Wrong number of args \(1\) passed to"
        (macroexpand `(m0 1))))
  (is (thrown-with-msg? ArityError #"Wrong number of args \(2\) passed to"
        (macroexpand `(m1 1 2))))
  (is (thrown-with-msg? ArityError #"\Q/f2:+><->!#%&*|b\E"
        (f2:+><->!#%&*|b 1 2))
        "ArityError messages should demunge function names"))

(deftest assert-arg-messages
  ; used to ensure that error messages properly use local names for macros
  (refer 'clojure.core :rename '{with-open renamed-with-open})

  ; would have used `are` here, but :line meta on &form doesn't survive successive macroexpansions
  (doseq [[msg-regex-str form] [["renamed-with-open" "(renamed-with-open [a])"]]]
    (is (thrown-with-msg? BadArgumentError
                          (re-pattern (format msg-regex-str))
                          (macroexpand (read-string form))))))

(deftest extract-ex-data
  (try
   (throw (ex-info "example error" {:foo 1}))
   (catch _ t
     (is (= {:foo 1} (ex-data t)))))
  (is (nil? (ex-data (Error. "example non ex-data")))))

(deftest IError->map-test
  (testing "base functionality"
    (let [{:keys [message data cause]} (IError->map
                                        (Error. "I am a string literal"))]
      (is (= "I am a string literal" message))
      (is (= nil data))
      (is (= nil cause))))
  (testing "cause"
    (let [{:keys [message data cause]} (IError->map
                                        (ex-info "I am not a number"
                                                 #{}
                                                 (Error. "double two")))]
      (is (= "I am not a number" message))
      (is (= #{} data))
      (is (= "double two" (:message cause)))))
  (testing "ex-data"
    (let [{data :data}
          (IError->map (ex-info "ex-info"
                                {:some "data"}))]
      (is (= data {:some "data"})))))

(deftest ex-info-disallows-nil-data
  (is (thrown? BadArgumentError (ex-info "message" nil)))
  (is (thrown? BadArgumentError (ex-info "message" nil (Error. "cause")))))

(deftest ex-info-arities-construct-equivalent-exceptions
  (let [ex1 (ex-info "message" {:foo "bar"})
        ex2 (ex-info "message" {:foo "bar"} nil)]
    (is (= (.message ex1) (.message ex2)))
    (is (= (.data ex1) (.data ex2)))
    (is (= (.cause ex1) (.cause ex2)))))
