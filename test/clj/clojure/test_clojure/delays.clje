(ns clojure.test-clojure.delays
  (:use clojure.test)
  (:import [erlang.util CyclicBarrier]))

(deftest calls-once
  (let [a (atom 0)
        d (delay (swap! a inc))]
    (is (= 0 @a))
    (is (= 1 @d))
    (is (= 1 @d))
    (is (= 1 @a))))

(deftest calls-once-in-parallel
  (let [a (atom 0)
        d (delay (swap! a inc))
        threads 100
        ^CyclicBarrier barrier (CyclicBarrier. (+ threads 1))]
    (is (= 0 @a))
    (dotimes [_ threads]
      (erlang/spawn
       (fn []
         (.await barrier)
         (dotimes [_ 10000]
           (is (= 1 @d)))
         (.await barrier))))
    (.await barrier)
    (.await barrier)
    (is (= 1 @d))
    (is (= 1 @d))
    (is (= 1 @a))))

(deftest saves-exceptions
  (let [f #(do (throw (clojerl.Error. "broken"))
               1)
        d (delay (f))
        try-call #(try
                    @d
                    (catch _ e e))
        first-result (try-call)]
    (is (instance? clojerl.Error first-result))
    (is (identical? first-result (try-call)))))

(deftest saves-exceptions-in-parallel
  (let [f #(do (throw (clojerl.Error. "broken"))
               1)
        d (delay (f))
        try-call #(try
                    @d
                    (catch clojerl.Error e e))
        threads 100
        ^CyclicBarrier barrier (CyclicBarrier. (+ threads 1))]
    (dotimes [_ threads]
      (erlang/spawn
       (fn []
         (.await barrier)
         (let [first-result (try-call)]
           (dotimes [_ 10000]
             (is (instance? clojerl.Error (try-call)))
             (is (identical? first-result (try-call)))))
         (.await barrier))))
    (.await barrier)
    (.await barrier)
    (is (instance? clojerl.Error (try-call)))
    (is (identical? (try-call) (try-call)))))
